apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.apollographql.apollo'
apply plugin: "androidx.navigation.safeargs.kotlin"

apply from: "sensitive-values.gradle"

repositories {
    jcenter()
    google()
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.example.githubstars"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        // If debug and release builds use different keys, two different String arrays can be made
        // with the different key names.
        def sensitiveValueNames = ["GITHUB_ACCESS_TOKEN"]
        def sensitiveValueFiles = ["sensitive-values.properties"]

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            encryptSensitiveValues(it, sensitiveValueFiles, sensitiveValueNames)
        }

        debug {
            encryptSensitiveValues(it, sensitiveValueFiles, sensitiveValueNames)
        }
    }

    // Certain Navigation component features require
    // Java 8 support.
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    viewBinding {
        enabled = true
    }

}

dependencies {
    //TODO: organize dependencies
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation project(":chromecustomtabsnavigator")

    implementation "androidx.recyclerview:recyclerview:1.1.0"

    //TODO: needed for Apollo?
    implementation 'com.squareup.okhttp3:okhttp:4.7.2'

    implementation("com.apollographql.apollo:apollo-runtime:1.4.4")

    // TODO: for Apollo
    compileOnly("org.jetbrains:annotations:13.0")
    testCompileOnly("org.jetbrains:annotations:13.0")
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    // Navigation Component
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    //TODO: what o I do with this?
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"

    implementation 'com.jakewharton.timber:timber:4.7.1'

}

//TODO: make more flexible
//def getGitHubApiKey() {
//    def keysFile = file("sensitive-values.properties")
//    def keysProperties = new Properties()
//    keysProperties.load(new FileInputStream(keysFile))
//    return keysProperties['GITHUB_API_KEY']
//}

//def buildConfigFieldForKey(buildType, String keyName) {
////    return buildConfigField("String", keyName, getKeyFromFile(keyName))
//    buildType.buildConfigField("String", "TEST", getKeyFromFile('GITHUB_API_KEY'))
//}

//TODO: try '"blah"' for adding quotes to strings
//def getKeyFromFile(String keyName) {
//    //TODO: handle if property is not found
//    def keysFile = file("sensitive-values.properties")
//    def keysProperties = new Properties()
//    keysProperties.load(new FileInputStream(keysFile))
//    return keysProperties[keyName]
//}
//TODO: note about environment variables on mac https://stackoverflow.com/a/26633658/967131
//TODO: tidy up method
//TODO: do I need to define the types of the parameters?
//TODO: make syntax more Groovy like?
//def encryptSensitiveValues(buildType, fileNames, valueNames) {
//    // Get the SecretKey object and write it to BuildConfig
//    def key = buildEncryptionKey(buildType)
//    Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING")
//    cipher.init(Cipher.ENCRYPT_MODE, key)
//
//    def propertiesList = loadPropertiesList(fileNames)
//    for (valueName in valueNames) {
//        // First try to find the sensitive value in system environment variables
//        // Note: if you test on Mac OS X, environment variables will not be available by default.
//        // Try running Android Studio from the command line, like
//        // /Applications/Android\ Studio.app/Contents/MacOS/studio
//        def sensitiveValue = System.getenv(valueName)
//        if (sensitiveValue == null || sensitiveValue.length() == 0) {
//            // If the sensitive value wasn't in environment variables, check each properties file
//            // until we find it.
//            for (properties in propertiesList) {
//                sensitiveValue = properties[valueName]
//                if (sensitiveValue != null && sensitiveValue.length() > 0) {
//                    break
//                }
//            }
//        }
//        if (sensitiveValue == null || sensitiveValue.length() == 0) {
//            throw new GradleException("A sensitive value with the ID $valueName could not be found in environment variables or properties files.")
//        }
//        // Encrypt the sensitive value
//        byte[] encryptedBytes = cipher.doFinal(sensitiveValue.getBytes("UTF-8"))
//        // Add the encrypted value and the IV (initialization vector) to BuildConfig. We will
//        // need both, plus the original encryption key, to be able to decrypt the sensitive value.
//        buildType.buildConfigField("String[]", valueName,
//                "{" +
//                    "\"" + Base64.getEncoder().encodeToString(encryptedBytes) + "\"," +
//                    "\"" + Base64.getEncoder().encodeToString(cipher.getIV()) + "\"" +
//                "}")
//    }
//
//}
//
//def loadPropertiesList(fileNames) {
//    List<Properties> propertiesList = new ArrayList()
//    for (fileName in fileNames) {
//        def properties = new Properties()
//        properties.load(new FileInputStream(file(fileName)))
//        propertiesList.add(properties)
//    }
//    return propertiesList
//}
//
////TODO: maybe undo static
//static def buildEncryptionKey(buildType) {
//    KeyGenerator keyGenerator = KeyGenerator.getInstance("AES")
//    keyGenerator.init(256)
//    SecretKey key = keyGenerator.generateKey()
//    String encryptionKeyString = Base64.getEncoder().encodeToString(key.encoded)
//    buildType.buildConfigField("String", "ENCRYPTION_KEY", "\"$encryptionKeyString\"")
//    return key
//}

//TODO:
// multiple environments https://medium.com/@bharathkumarbachina/read-property-file-using-buildconfig-gradle-356c9cf49f0c