import javax.crypto.Cipher
import javax.crypto.KeyGenerator
import javax.crypto.SecretKey
import javax.crypto.spec.IvParameterSpec
import javax.crypto.spec.SecretKeySpec
import java.util.Base64

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.apollographql.apollo'
apply plugin: "androidx.navigation.safeargs.kotlin"

repositories {
    jcenter()
    google()
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.example.githubstars"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        // If debug and release builds use different keys, two different String arrays can be made
        // with the different key names.
        //TODO
        def sensitiveValueNames = ["GITHUB_API_KEY", "XYZZY", "PLOVER", "PLUGH"]
        def sensitiveValueFiles = ["sensitive-values.properties"]

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'




////            val plaintext: ByteArray = getKeyFromFile("GITHUB_API_KEY")
////            val keygen = KeyGenerator.getInstance("AES")
////            keygen.init(256)
////            val key: SecretKey = keygen.generateKey()
////            val cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING")
////            cipher.init(Cipher.ENCRYPT_MODE, key)
////            val ciphertext: ByteArray = cipher.doFinal(plaintext)
////            val iv: ByteArray = cipher.iv
//
//            byte[] plaintext = getKeyFromFile("GITHUB_API_KEY").getBytes("UTF-8")
////            byte[] plaintext = getKeyFromFile("GITHUB_API_KEY")
//            KeyGenerator keygen = KeyGenerator.getInstance("AES")
//            keygen.init(256)
//            SecretKey key = keygen.generateKey()
//            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING")
//            cipher.init(Cipher.ENCRYPT_MODE, key)
//            byte[] ciphertext = cipher.doFinal(plaintext)
//            byte[] iv = cipher.getIV()
//            IvParameterSpec ivSpec = new IvParameterSpec(iv)
//
//            String encryptionKeyString = Base64.getEncoder().encodeToString(key.encoded)
//            buildConfigField("String", "ENCRYPTION_KEY", "\"$encryptionKeyString\"")
//
//            project.logger.lifecycle("encryptionKeyString: $encryptionKeyString")
//
//            byte[] encryptionKeyByteArray = Base64.getDecoder().decode(encryptionKeyString)
//            SecretKey processedKey = new SecretKeySpec(encryptionKeyByteArray, 0, encryptionKeyByteArray.length, "AES")
//
//            String cipherString = Base64.getEncoder().encodeToString(ciphertext)
////            String cipherString = Base64.encodeToString(ciphertext)
////            String cipherString = "\"" + new String(ciphertext) + "\""
////            String cipherString = new String(ciphertext, "UTF-8")
//
//
//            Cipher cipher2 = Cipher.getInstance("AES/CBC/PKCS5PADDING")
//            cipher2.init(Cipher.DECRYPT_MODE, processedKey, ivSpec)
////            cipher2.init(Cipher.DECRYPT_MODE, key, ivSpec)
////            android.util.Base64.decode(cipherString)
//            byte[] decodedText = cipher2.doFinal(Base64.getDecoder().decode(cipherString))
////            byte[] decodedText = cipher2.doFinal(Base64.decode(cipherString))
////            byte[] decodedText = cipher2.doFinal(cipherString.getBytes())
////            String decodedString = "\"" + new String(decodedText) + "\""
////            String decodedString = new String(decodedText, "UTF-8")
//            String decodedString = new String(decodedText)
//            //TODO: save byte array in buildconfig?
////
////            buildConfigField("byte[]", "GITHUB_API_KEY", decodedText)
//
//            buildConfigField("String[]", "GITHUB_API_KEY",
//                    "{" +
//                            "\"" + cipherString + "\"," +
//                            "\"" + Base64.getEncoder().encodeToString(iv) + "\"" +
//                            "}")
////            buildConfigField("String", "GITHUB_API_KEY", decodedString)
////            buildConfigField("String", "GITHUB_API_KEY", "hello")
//
////            for (key in keys) {
////                buildConfigField("String", key, getKeyFromFile(key))
////            }
        }

        debug {
            encryptSensitiveValues(it, sensitiveValueFiles, sensitiveValueNames)
        }
    }

    // Certain Navigation component features require
    // Java 8 support.
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    viewBinding {
        enabled = true
    }

}

dependencies {
    //TODO: organize dependencies
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation project(":chromecustomtabsnavigator")

    implementation "androidx.recyclerview:recyclerview:1.1.0"

    //TODO: needed for Apollo?
    implementation 'com.squareup.okhttp3:okhttp:3.12.2'

    implementation("com.apollographql.apollo:apollo-runtime:1.4.4")

    // TODO: for Apollo
    compileOnly("org.jetbrains:annotations:13.0")
    testCompileOnly("org.jetbrains:annotations:13.0")
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    // Navigation Component
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    //TODO: what o I do with this?
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"

}

//TODO: make more flexible
//def getGitHubApiKey() {
//    def keysFile = file("sensitive-values.properties")
//    def keysProperties = new Properties()
//    keysProperties.load(new FileInputStream(keysFile))
//    return keysProperties['GITHUB_API_KEY']
//}

def buildConfigFieldForKey(buildType, String keyName) {
//    return buildConfigField("String", keyName, getKeyFromFile(keyName))
    buildType.buildConfigField("String", "TEST", getKeyFromFile('GITHUB_API_KEY'))
}

//TODO: try '"blah"' for adding quotes to strings
def getKeyFromFile(String keyName) {
    //TODO: handle if property is not found
    def keysFile = file("sensitive-values.properties")
    def keysProperties = new Properties()
    keysProperties.load(new FileInputStream(keysFile))
    return keysProperties[keyName]
}
//TODO: tidy up method
//TODO: do I need to define the types of the parameters?
//TODO: make syntax more Groovy like?
def encryptSensitiveValues(buildType, fileNames, valueNames) {
    KeyGenerator keyGenerator = KeyGenerator.getInstance("AES")
    keyGenerator.init(256)
    SecretKey key = keyGenerator.generateKey()
    String encryptionKeyString = Base64.getEncoder().encodeToString(key.encoded)
    buildType.buildConfigField("String", "ENCRYPTION_KEY", "\"$encryptionKeyString\"")

    def propertiesList = loadPropertiesList(fileNames)
    for (valueName in valueNames) {
        def sensitiveValue = System.getenv(valueName)
        if (sensitiveValue == null || sensitiveValue.length() == 0) {
            for (properties in propertiesList) {
                sensitiveValue = properties[valueName]
                if (sensitiveValue != null && sensitiveValue.length() > 0) {
                    break
                }
            }
        }
        if (sensitiveValue == null || sensitiveValue.length() == 0) {
            throw new GradleException("A sensitive value with the ID $valueName could not be found in environment variables or properties files.")
        }


        //TODO: try to reuse some of this
        byte[] sensitiveBytes = sensitiveValue.getBytes("UTF-8")

        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING")
        cipher.init(Cipher.ENCRYPT_MODE, key)
        byte[] encryptedBytes = cipher.doFinal(sensitiveBytes)

        buildType.buildConfigField("String[]", valueName,
                "{" +
                    "\"" + Base64.getEncoder().encodeToString(encryptedBytes) + "\"," +
                    "\"" + Base64.getEncoder().encodeToString(cipher.getIV()) + "\"" +
                "}")
    }

}

def loadPropertiesList(fileNames) {
    List<Properties> propertiesList = new ArrayList()
    for (fileName in fileNames) {
        def properties = new Properties()
        properties.load(new FileInputStream(file(fileName)))
        propertiesList.add(properties)
    }
    return propertiesList
}

// multiple environments https://medium.com/@bharathkumarbachina/read-property-file-using-buildconfig-gradle-356c9cf49f0c